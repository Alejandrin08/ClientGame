//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ChineseCheckersClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserModel", Namespace="http://schemas.datacontract.org/2004/07/ChineseCheckersLogicServer.Model")]
    [System.SerializableAttribute()]
    public partial class UserModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GamertagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ImageProfileField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlayerStatusField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Gamertag {
            get {
                return this.GamertagField;
            }
            set {
                if ((object.ReferenceEquals(this.GamertagField, value) != true)) {
                    this.GamertagField = value;
                    this.RaisePropertyChanged("Gamertag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImageProfile {
            get {
                return this.ImageProfileField;
            }
            set {
                if ((object.ReferenceEquals(this.ImageProfileField, value) != true)) {
                    this.ImageProfileField = value;
                    this.RaisePropertyChanged("ImageProfile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlayerStatus {
            get {
                return this.PlayerStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.PlayerStatusField, value) != true)) {
                    this.PlayerStatusField = value;
                    this.RaisePropertyChanged("PlayerStatus");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FriendshipModel", Namespace="http://schemas.datacontract.org/2004/07/ChineseCheckersLogicServer.Model")]
    [System.SerializableAttribute()]
    public partial class FriendshipModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdFriendField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdRoomField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RequestStatusField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNotificationField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdFriend {
            get {
                return this.IdFriendField;
            }
            set {
                if ((this.IdFriendField.Equals(value) != true)) {
                    this.IdFriendField = value;
                    this.RaisePropertyChanged("IdFriend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IdRoom {
            get {
                return this.IdRoomField;
            }
            set {
                if ((object.ReferenceEquals(this.IdRoomField, value) != true)) {
                    this.IdRoomField = value;
                    this.RaisePropertyChanged("IdRoom");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RequestStatus {
            get {
                return this.RequestStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.RequestStatusField, value) != true)) {
                    this.RequestStatusField = value;
                    this.RaisePropertyChanged("RequestStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeNotification {
            get {
                return this.TypeNotificationField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNotificationField, value) != true)) {
                    this.TypeNotificationField = value;
                    this.RaisePropertyChanged("TypeNotification");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ReportModel", Namespace="http://schemas.datacontract.org/2004/07/ChineseCheckersLogicServer.Model")]
    [System.SerializableAttribute()]
    public partial class ReportModel : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CurrentDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime EndDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdUserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReasonField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CurrentDate {
            get {
                return this.CurrentDateField;
            }
            set {
                if ((this.CurrentDateField.Equals(value) != true)) {
                    this.CurrentDateField = value;
                    this.RaisePropertyChanged("CurrentDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime EndDate {
            get {
                return this.EndDateField;
            }
            set {
                if ((this.EndDateField.Equals(value) != true)) {
                    this.EndDateField = value;
                    this.RaisePropertyChanged("EndDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdUser {
            get {
                return this.IdUserField;
            }
            set {
                if ((this.IdUserField.Equals(value) != true)) {
                    this.IdUserField = value;
                    this.RaisePropertyChanged("IdUser");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Reason {
            get {
                return this.ReasonField;
            }
            set {
                if ((object.ReferenceEquals(this.ReasonField, value) != true)) {
                    this.ReasonField = value;
                    this.RaisePropertyChanged("Reason");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUser")]
    public interface IUser {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUserGame", ReplyAction="http://tempuri.org/IUser/AddUserGameResponse")]
        int AddUserGame(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUserGame", ReplyAction="http://tempuri.org/IUser/AddUserGameResponse")]
        System.Threading.Tasks.Task<int> AddUserGameAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUserAccount", ReplyAction="http://tempuri.org/IUser/AddUserAccountResponse")]
        int AddUserAccount(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/AddUserAccount", ReplyAction="http://tempuri.org/IUser/AddUserAccountResponse")]
        System.Threading.Tasks.Task<int> AddUserAccountAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateUser", ReplyAction="http://tempuri.org/IUser/ValidateUserResponse")]
        int ValidateUser(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateUser", ReplyAction="http://tempuri.org/IUser/ValidateUserResponse")]
        System.Threading.Tasks.Task<int> ValidateUserAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetPlayerImage", ReplyAction="http://tempuri.org/IUser/GetPlayerImageResponse")]
        string GetPlayerImage(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetPlayerImage", ReplyAction="http://tempuri.org/IUser/GetPlayerImageResponse")]
        System.Threading.Tasks.Task<string> GetPlayerImageAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LogoutUser", ReplyAction="http://tempuri.org/IUser/LogoutUserResponse")]
        void LogoutUser(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/LogoutUser", ReplyAction="http://tempuri.org/IUser/LogoutUserResponse")]
        System.Threading.Tasks.Task LogoutUserAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateEmail", ReplyAction="http://tempuri.org/IUser/ValidateEmailResponse")]
        int ValidateEmail(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateEmail", ReplyAction="http://tempuri.org/IUser/ValidateEmailResponse")]
        System.Threading.Tasks.Task<int> ValidateEmailAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateGamertag", ReplyAction="http://tempuri.org/IUser/ValidateGamertagResponse")]
        int ValidateGamertag(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/ValidateGamertag", ReplyAction="http://tempuri.org/IUser/ValidateGamertagResponse")]
        System.Threading.Tasks.Task<int> ValidateGamertagAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdatePassword", ReplyAction="http://tempuri.org/IUser/UpdatePasswordResponse")]
        int UpdatePassword(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdatePassword", ReplyAction="http://tempuri.org/IUser/UpdatePasswordResponse")]
        System.Threading.Tasks.Task<int> UpdatePasswordAsync(ChineseCheckersClient.ServiceReference.UserModel userModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InfoUser", ReplyAction="http://tempuri.org/IUser/InfoUserResponse")]
        ChineseCheckersClient.ServiceReference.UserModel InfoUser(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/InfoUser", ReplyAction="http://tempuri.org/IUser/InfoUserResponse")]
        System.Threading.Tasks.Task<ChineseCheckersClient.ServiceReference.UserModel> InfoUserAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateInfoUser", ReplyAction="http://tempuri.org/IUser/UpdateInfoUserResponse")]
        int UpdateInfoUser(ChineseCheckersClient.ServiceReference.UserModel usermodel, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/UpdateInfoUser", ReplyAction="http://tempuri.org/IUser/UpdateInfoUserResponse")]
        System.Threading.Tasks.Task<int> UpdateInfoUserAsync(ChineseCheckersClient.ServiceReference.UserModel usermodel, string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/FindGamertag", ReplyAction="http://tempuri.org/IUser/FindGamertagResponse")]
        string FindGamertag(string currentGamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/FindGamertag", ReplyAction="http://tempuri.org/IUser/FindGamertagResponse")]
        System.Threading.Tasks.Task<string> FindGamertagAsync(string currentGamertag, string friendGamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetEmail", ReplyAction="http://tempuri.org/IUser/GetEmailResponse")]
        string GetEmail(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetEmail", ReplyAction="http://tempuri.org/IUser/GetEmailResponse")]
        System.Threading.Tasks.Task<string> GetEmailAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetId", ReplyAction="http://tempuri.org/IUser/GetIdResponse")]
        int GetId(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUser/GetId", ReplyAction="http://tempuri.org/IUser/GetIdResponse")]
        System.Threading.Tasks.Task<int> GetIdAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserChannel : ChineseCheckersClient.ServiceReference.IUser, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserClient : System.ServiceModel.ClientBase<ChineseCheckersClient.ServiceReference.IUser>, ChineseCheckersClient.ServiceReference.IUser {
        
        public UserClient() {
        }
        
        public UserClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public UserClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public UserClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddUserGame(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.AddUserGame(userModel);
        }
        
        public System.Threading.Tasks.Task<int> AddUserGameAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.AddUserGameAsync(userModel);
        }
        
        public int AddUserAccount(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.AddUserAccount(userModel);
        }
        
        public System.Threading.Tasks.Task<int> AddUserAccountAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.AddUserAccountAsync(userModel);
        }
        
        public int ValidateUser(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateUser(userModel);
        }
        
        public System.Threading.Tasks.Task<int> ValidateUserAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateUserAsync(userModel);
        }
        
        public string GetPlayerImage(string gamertag) {
            return base.Channel.GetPlayerImage(gamertag);
        }
        
        public System.Threading.Tasks.Task<string> GetPlayerImageAsync(string gamertag) {
            return base.Channel.GetPlayerImageAsync(gamertag);
        }
        
        public void LogoutUser(int idUser) {
            base.Channel.LogoutUser(idUser);
        }
        
        public System.Threading.Tasks.Task LogoutUserAsync(int idUser) {
            return base.Channel.LogoutUserAsync(idUser);
        }
        
        public int ValidateEmail(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateEmail(userModel);
        }
        
        public System.Threading.Tasks.Task<int> ValidateEmailAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateEmailAsync(userModel);
        }
        
        public int ValidateGamertag(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateGamertag(userModel);
        }
        
        public System.Threading.Tasks.Task<int> ValidateGamertagAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.ValidateGamertagAsync(userModel);
        }
        
        public int UpdatePassword(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.UpdatePassword(userModel);
        }
        
        public System.Threading.Tasks.Task<int> UpdatePasswordAsync(ChineseCheckersClient.ServiceReference.UserModel userModel) {
            return base.Channel.UpdatePasswordAsync(userModel);
        }
        
        public ChineseCheckersClient.ServiceReference.UserModel InfoUser(string gamertag) {
            return base.Channel.InfoUser(gamertag);
        }
        
        public System.Threading.Tasks.Task<ChineseCheckersClient.ServiceReference.UserModel> InfoUserAsync(string gamertag) {
            return base.Channel.InfoUserAsync(gamertag);
        }
        
        public int UpdateInfoUser(ChineseCheckersClient.ServiceReference.UserModel usermodel, string gamertag) {
            return base.Channel.UpdateInfoUser(usermodel, gamertag);
        }
        
        public System.Threading.Tasks.Task<int> UpdateInfoUserAsync(ChineseCheckersClient.ServiceReference.UserModel usermodel, string gamertag) {
            return base.Channel.UpdateInfoUserAsync(usermodel, gamertag);
        }
        
        public string FindGamertag(string currentGamertag, string friendGamertag) {
            return base.Channel.FindGamertag(currentGamertag, friendGamertag);
        }
        
        public System.Threading.Tasks.Task<string> FindGamertagAsync(string currentGamertag, string friendGamertag) {
            return base.Channel.FindGamertagAsync(currentGamertag, friendGamertag);
        }
        
        public string GetEmail(string gamertag) {
            return base.Channel.GetEmail(gamertag);
        }
        
        public System.Threading.Tasks.Task<string> GetEmailAsync(string gamertag) {
            return base.Channel.GetEmailAsync(gamertag);
        }
        
        public int GetId(string gamertag) {
            return base.Channel.GetId(gamertag);
        }
        
        public System.Threading.Tasks.Task<int> GetIdAsync(string gamertag) {
            return base.Channel.GetIdAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUsersManager", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IUsersManagerCallback))]
    public interface IUsersManager {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUsersManager/GetFriends")]
        void GetFriends(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUsersManager/GetFriends")]
        System.Threading.Tasks.Task GetFriendsAsync(string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersManagerCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUsersManager/GetFriendsCallback", ReplyAction="http://tempuri.org/IUsersManager/GetFriendsCallbackResponse")]
        void GetFriendsCallback(System.Collections.Generic.Dictionary<string, System.Tuple<string, bool>> stateFriend);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUsersManagerChannel : ChineseCheckersClient.ServiceReference.IUsersManager, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UsersManagerClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IUsersManager>, ChineseCheckersClient.ServiceReference.IUsersManager {
        
        public UsersManagerClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UsersManagerClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetFriends(string gamertag) {
            base.Channel.GetFriends(gamertag);
        }
        
        public System.Threading.Tasks.Task GetFriendsAsync(string gamertag) {
            return base.Channel.GetFriendsAsync(gamertag);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUserSession", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IUserSessionCallback))]
    public interface IUserSession {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserSession/GetSessionPlayer")]
        void GetSessionPlayer(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserSession/GetSessionPlayer")]
        System.Threading.Tasks.Task GetSessionPlayerAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserSessionCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserSession/GetSessionPlayerCallback", ReplyAction="http://tempuri.org/IUserSession/GetSessionPlayerCallbackResponse")]
        void GetSessionPlayerCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserSessionChannel : ChineseCheckersClient.ServiceReference.IUserSession, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserSessionClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IUserSession>, ChineseCheckersClient.ServiceReference.IUserSession {
        
        public UserSessionClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UserSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UserSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserSessionClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetSessionPlayer(int idUser) {
            base.Channel.GetSessionPlayer(idUser);
        }
        
        public System.Threading.Tasks.Task GetSessionPlayerAsync(int idUser) {
            return base.Channel.GetSessionPlayerAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IFriendship")]
    public interface IFriendship {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/AddFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/AddFriendPlayerResponse")]
        int AddFriendPlayer(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/AddFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/AddFriendPlayerResponse")]
        System.Threading.Tasks.Task<int> AddFriendPlayerAsync(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/UpdateFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/UpdateFriendPlayerResponse")]
        int UpdateFriendPlayer(int idUser, int idFriend, string requestStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/UpdateFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/UpdateFriendPlayerResponse")]
        System.Threading.Tasks.Task<int> UpdateFriendPlayerAsync(int idUser, int idFriend, string requestStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/DeleteFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/DeleteFriendPlayerResponse")]
        int DeleteFriendPlayer(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/DeleteFriendPlayer", ReplyAction="http://tempuri.org/IFriendship/DeleteFriendPlayerResponse")]
        System.Threading.Tasks.Task<int> DeleteFriendPlayerAsync(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/ValidateFriendRequest", ReplyAction="http://tempuri.org/IFriendship/ValidateFriendRequestResponse")]
        int ValidateFriendRequest(int idUser, int idFriend, string resquestStatus);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IFriendship/ValidateFriendRequest", ReplyAction="http://tempuri.org/IFriendship/ValidateFriendRequestResponse")]
        System.Threading.Tasks.Task<int> ValidateFriendRequestAsync(int idUser, int idFriend, string resquestStatus);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IFriendshipChannel : ChineseCheckersClient.ServiceReference.IFriendship, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class FriendshipClient : System.ServiceModel.ClientBase<ChineseCheckersClient.ServiceReference.IFriendship>, ChineseCheckersClient.ServiceReference.IFriendship {
        
        public FriendshipClient() {
        }
        
        public FriendshipClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public FriendshipClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public FriendshipClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddFriendPlayer(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel) {
            return base.Channel.AddFriendPlayer(friendshipModel);
        }
        
        public System.Threading.Tasks.Task<int> AddFriendPlayerAsync(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel) {
            return base.Channel.AddFriendPlayerAsync(friendshipModel);
        }
        
        public int UpdateFriendPlayer(int idUser, int idFriend, string requestStatus) {
            return base.Channel.UpdateFriendPlayer(idUser, idFriend, requestStatus);
        }
        
        public System.Threading.Tasks.Task<int> UpdateFriendPlayerAsync(int idUser, int idFriend, string requestStatus) {
            return base.Channel.UpdateFriendPlayerAsync(idUser, idFriend, requestStatus);
        }
        
        public int DeleteFriendPlayer(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel) {
            return base.Channel.DeleteFriendPlayer(friendshipModel);
        }
        
        public System.Threading.Tasks.Task<int> DeleteFriendPlayerAsync(ChineseCheckersClient.ServiceReference.FriendshipModel friendshipModel) {
            return base.Channel.DeleteFriendPlayerAsync(friendshipModel);
        }
        
        public int ValidateFriendRequest(int idUser, int idFriend, string resquestStatus) {
            return base.Channel.ValidateFriendRequest(idUser, idFriend, resquestStatus);
        }
        
        public System.Threading.Tasks.Task<int> ValidateFriendRequestAsync(int idUser, int idFriend, string resquestStatus) {
            return base.Channel.ValidateFriendRequestAsync(idUser, idFriend, resquestStatus);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IUserFriendRequest", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IUserFriendRequestCallback))]
    public interface IUserFriendRequest {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserFriendRequest/GetFriendRequest")]
        void GetFriendRequest(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IUserFriendRequest/GetFriendRequest")]
        System.Threading.Tasks.Task GetFriendRequestAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserFriendRequestCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IUserFriendRequest/GetFriendRequestCallback", ReplyAction="http://tempuri.org/IUserFriendRequest/GetFriendRequestCallbackResponse")]
        void GetFriendRequestCallback(System.Collections.Generic.Dictionary<string, System.ValueTuple<string, string, string>> friendPlayer);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IUserFriendRequestChannel : ChineseCheckersClient.ServiceReference.IUserFriendRequest, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserFriendRequestClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IUserFriendRequest>, ChineseCheckersClient.ServiceReference.IUserFriendRequest {
        
        public UserFriendRequestClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public UserFriendRequestClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public UserFriendRequestClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserFriendRequestClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public UserFriendRequestClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetFriendRequest(int idUser) {
            base.Channel.GetFriendRequest(idUser);
        }
        
        public System.Threading.Tasks.Task GetFriendRequestAsync(int idUser) {
            return base.Channel.GetFriendRequestAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IReport")]
    public interface IReport {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/AddReport", ReplyAction="http://tempuri.org/IReport/AddReportResponse")]
        int AddReport(ChineseCheckersClient.ServiceReference.ReportModel reportModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/AddReport", ReplyAction="http://tempuri.org/IReport/AddReportResponse")]
        System.Threading.Tasks.Task<int> AddReportAsync(ChineseCheckersClient.ServiceReference.ReportModel reportModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/UpdateReport", ReplyAction="http://tempuri.org/IReport/UpdateReportResponse")]
        int UpdateReport(ChineseCheckersClient.ServiceReference.ReportModel reportModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/UpdateReport", ReplyAction="http://tempuri.org/IReport/UpdateReportResponse")]
        System.Threading.Tasks.Task<int> UpdateReportAsync(ChineseCheckersClient.ServiceReference.ReportModel reportModel);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/DeleteReport", ReplyAction="http://tempuri.org/IReport/DeleteReportResponse")]
        int DeleteReport(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/DeleteReport", ReplyAction="http://tempuri.org/IReport/DeleteReportResponse")]
        System.Threading.Tasks.Task<int> DeleteReportAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/GetNumReports", ReplyAction="http://tempuri.org/IReport/GetNumReportsResponse")]
        int GetNumReports(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/GetNumReports", ReplyAction="http://tempuri.org/IReport/GetNumReportsResponse")]
        System.Threading.Tasks.Task<int> GetNumReportsAsync(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/GetDateReport", ReplyAction="http://tempuri.org/IReport/GetDateReportResponse")]
        System.DateTime GetDateReport(int idUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IReport/GetDateReport", ReplyAction="http://tempuri.org/IReport/GetDateReportResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetDateReportAsync(int idUser);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IReportChannel : ChineseCheckersClient.ServiceReference.IReport, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ReportClient : System.ServiceModel.ClientBase<ChineseCheckersClient.ServiceReference.IReport>, ChineseCheckersClient.ServiceReference.IReport {
        
        public ReportClient() {
        }
        
        public ReportClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ReportClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ReportClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int AddReport(ChineseCheckersClient.ServiceReference.ReportModel reportModel) {
            return base.Channel.AddReport(reportModel);
        }
        
        public System.Threading.Tasks.Task<int> AddReportAsync(ChineseCheckersClient.ServiceReference.ReportModel reportModel) {
            return base.Channel.AddReportAsync(reportModel);
        }
        
        public int UpdateReport(ChineseCheckersClient.ServiceReference.ReportModel reportModel) {
            return base.Channel.UpdateReport(reportModel);
        }
        
        public System.Threading.Tasks.Task<int> UpdateReportAsync(ChineseCheckersClient.ServiceReference.ReportModel reportModel) {
            return base.Channel.UpdateReportAsync(reportModel);
        }
        
        public int DeleteReport(int idUser) {
            return base.Channel.DeleteReport(idUser);
        }
        
        public System.Threading.Tasks.Task<int> DeleteReportAsync(int idUser) {
            return base.Channel.DeleteReportAsync(idUser);
        }
        
        public int GetNumReports(int idUser) {
            return base.Channel.GetNumReports(idUser);
        }
        
        public System.Threading.Tasks.Task<int> GetNumReportsAsync(int idUser) {
            return base.Channel.GetNumReportsAsync(idUser);
        }
        
        public System.DateTime GetDateReport(int idUser) {
            return base.Channel.GetDateReport(idUser);
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetDateReportAsync(int idUser) {
            return base.Channel.GetDateReportAsync(idUser);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IRoom")]
    public interface IRoom {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/CreateRoom", ReplyAction="http://tempuri.org/IRoom/CreateRoomResponse")]
        string CreateRoom(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/CreateRoom", ReplyAction="http://tempuri.org/IRoom/CreateRoomResponse")]
        System.Threading.Tasks.Task<string> CreateRoomAsync(string gamertag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/GenerateId", ReplyAction="http://tempuri.org/IRoom/GenerateIdResponse")]
        string GenerateId();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/GenerateId", ReplyAction="http://tempuri.org/IRoom/GenerateIdResponse")]
        System.Threading.Tasks.Task<string> GenerateIdAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/RemovePlayer", ReplyAction="http://tempuri.org/IRoom/RemovePlayerResponse")]
        void RemovePlayer(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/RemovePlayer", ReplyAction="http://tempuri.org/IRoom/RemovePlayerResponse")]
        System.Threading.Tasks.Task RemovePlayerAsync(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/ValidateRoom", ReplyAction="http://tempuri.org/IRoom/ValidateRoomResponse")]
        int ValidateRoom(string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IRoom/ValidateRoom", ReplyAction="http://tempuri.org/IRoom/ValidateRoomResponse")]
        System.Threading.Tasks.Task<int> ValidateRoomAsync(string idRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IRoomChannel : ChineseCheckersClient.ServiceReference.IRoom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RoomClient : System.ServiceModel.ClientBase<ChineseCheckersClient.ServiceReference.IRoom>, ChineseCheckersClient.ServiceReference.IRoom {
        
        public RoomClient() {
        }
        
        public RoomClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public RoomClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public RoomClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string CreateRoom(string gamertag) {
            return base.Channel.CreateRoom(gamertag);
        }
        
        public System.Threading.Tasks.Task<string> CreateRoomAsync(string gamertag) {
            return base.Channel.CreateRoomAsync(gamertag);
        }
        
        public string GenerateId() {
            return base.Channel.GenerateId();
        }
        
        public System.Threading.Tasks.Task<string> GenerateIdAsync() {
            return base.Channel.GenerateIdAsync();
        }
        
        public void RemovePlayer(string gamertag, string idRoom) {
            base.Channel.RemovePlayer(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task RemovePlayerAsync(string gamertag, string idRoom) {
            return base.Channel.RemovePlayerAsync(gamertag, idRoom);
        }
        
        public int ValidateRoom(string idRoom) {
            return base.Channel.ValidateRoom(idRoom);
        }
        
        public System.Threading.Tasks.Task<int> ValidateRoomAsync(string idRoom) {
            return base.Channel.ValidateRoomAsync(idRoom);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IMessage", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IMessageCallback))]
    public interface IMessage {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessage/SendMessage")]
        void SendMessage(string message, string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IMessage/SendMessage")]
        System.Threading.Tasks.Task SendMessageAsync(string message, string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessage/AddPlayer", ReplyAction="http://tempuri.org/IMessage/AddPlayerResponse")]
        void AddPlayer(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessage/AddPlayer", ReplyAction="http://tempuri.org/IMessage/AddPlayerResponse")]
        System.Threading.Tasks.Task AddPlayerAsync(string gamertag, string idRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMessage/SendMessageCallback", ReplyAction="http://tempuri.org/IMessage/SendMessageCallbackResponse")]
        void SendMessageCallback(string message, string gamertag);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMessageChannel : ChineseCheckersClient.ServiceReference.IMessage, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MessageClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IMessage>, ChineseCheckersClient.ServiceReference.IMessage {
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public MessageClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendMessage(string message, string gamertag, string idRoom) {
            base.Channel.SendMessage(message, gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task SendMessageAsync(string message, string gamertag, string idRoom) {
            return base.Channel.SendMessageAsync(message, gamertag, idRoom);
        }
        
        public void AddPlayer(string gamertag, string idRoom) {
            base.Channel.AddPlayer(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task AddPlayerAsync(string gamertag, string idRoom) {
            return base.Channel.AddPlayerAsync(gamertag, idRoom);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IPlayersRoom", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IPlayersRoomCallback))]
    public interface IPlayersRoom {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersRoom/GetPlayersRoom")]
        void GetPlayersRoom(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IPlayersRoom/GetPlayersRoom")]
        System.Threading.Tasks.Task GetPlayersRoomAsync(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayersRoom/AddPlayerRoom", ReplyAction="http://tempuri.org/IPlayersRoom/AddPlayerRoomResponse")]
        void AddPlayerRoom(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayersRoom/AddPlayerRoom", ReplyAction="http://tempuri.org/IPlayersRoom/AddPlayerRoomResponse")]
        System.Threading.Tasks.Task AddPlayerRoomAsync(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayersRoom/RemovePlayerRoom", ReplyAction="http://tempuri.org/IPlayersRoom/RemovePlayerRoomResponse")]
        void RemovePlayerRoom(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayersRoom/RemovePlayerRoom", ReplyAction="http://tempuri.org/IPlayersRoom/RemovePlayerRoomResponse")]
        System.Threading.Tasks.Task RemovePlayerRoomAsync(string gamertag, string idRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayersRoomCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IPlayersRoom/GetPlayersRoomCallback", ReplyAction="http://tempuri.org/IPlayersRoom/GetPlayersRoomCallbackResponse")]
        void GetPlayersRoomCallback(string[] playersInRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPlayersRoomChannel : ChineseCheckersClient.ServiceReference.IPlayersRoom, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PlayersRoomClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IPlayersRoom>, ChineseCheckersClient.ServiceReference.IPlayersRoom {
        
        public PlayersRoomClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public PlayersRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public PlayersRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayersRoomClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public PlayersRoomClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void GetPlayersRoom(string gamertag, string idRoom) {
            base.Channel.GetPlayersRoom(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task GetPlayersRoomAsync(string gamertag, string idRoom) {
            return base.Channel.GetPlayersRoomAsync(gamertag, idRoom);
        }
        
        public void AddPlayerRoom(string gamertag, string idRoom) {
            base.Channel.AddPlayerRoom(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task AddPlayerRoomAsync(string gamertag, string idRoom) {
            return base.Channel.AddPlayerRoomAsync(gamertag, idRoom);
        }
        
        public void RemovePlayerRoom(string gamertag, string idRoom) {
            base.Channel.RemovePlayerRoom(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task RemovePlayerRoomAsync(string gamertag, string idRoom) {
            return base.Channel.RemovePlayerRoomAsync(gamertag, idRoom);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IBoard", CallbackContract=typeof(ChineseCheckersClient.ServiceReference.IBoardCallback))]
    public interface IBoard {
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoard/SendToBoard")]
        void SendToBoard(string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(IsOneWay=true, Action="http://tempuri.org/IBoard/SendToBoard")]
        System.Threading.Tasks.Task SendToBoardAsync(string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoard/AddPlayerInBoard", ReplyAction="http://tempuri.org/IBoard/AddPlayerInBoardResponse")]
        void AddPlayerInBoard(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoard/AddPlayerInBoard", ReplyAction="http://tempuri.org/IBoard/AddPlayerInBoardResponse")]
        System.Threading.Tasks.Task AddPlayerInBoardAsync(string gamertag, string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoard/ValidateBoardRoom", ReplyAction="http://tempuri.org/IBoard/ValidateBoardRoomResponse")]
        bool ValidateBoardRoom(string idRoom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoard/ValidateBoardRoom", ReplyAction="http://tempuri.org/IBoard/ValidateBoardRoomResponse")]
        System.Threading.Tasks.Task<bool> ValidateBoardRoomAsync(string idRoom);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBoardCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBoard/SendToBoardCallback", ReplyAction="http://tempuri.org/IBoard/SendToBoardCallbackResponse")]
        void SendToBoardCallback();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBoardChannel : ChineseCheckersClient.ServiceReference.IBoard, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BoardClient : System.ServiceModel.DuplexClientBase<ChineseCheckersClient.ServiceReference.IBoard>, ChineseCheckersClient.ServiceReference.IBoard {
        
        public BoardClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public BoardClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public BoardClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BoardClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public BoardClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void SendToBoard(string idRoom) {
            base.Channel.SendToBoard(idRoom);
        }
        
        public System.Threading.Tasks.Task SendToBoardAsync(string idRoom) {
            return base.Channel.SendToBoardAsync(idRoom);
        }
        
        public void AddPlayerInBoard(string gamertag, string idRoom) {
            base.Channel.AddPlayerInBoard(gamertag, idRoom);
        }
        
        public System.Threading.Tasks.Task AddPlayerInBoardAsync(string gamertag, string idRoom) {
            return base.Channel.AddPlayerInBoardAsync(gamertag, idRoom);
        }
        
        public bool ValidateBoardRoom(string idRoom) {
            return base.Channel.ValidateBoardRoom(idRoom);
        }
        
        public System.Threading.Tasks.Task<bool> ValidateBoardRoomAsync(string idRoom) {
            return base.Channel.ValidateBoardRoomAsync(idRoom);
        }
    }
}
